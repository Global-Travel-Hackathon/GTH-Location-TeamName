#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require('../app');
const debug = require('debug')('api-auth:server');
const http = require('http');
const socketIo = require('socket.io');

const Trip = require('../models/Trip');
/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || '4000');
app.set('port', port);

/**
 * Create HTTP server.
 */

const server = http.createServer(app);

const io = socketIo(server);

const removeItemFromArr = (arr, item) => {
  const i = arr.indexOf(item);

  if (i !== -1) {
    arr.splice(i, 1);
  }
};
const users = [];
io.set('origins', '*:*');
io.on('connection', socket => {
  socket.on('imon', idUser => {
    const ami = users.filter(e => e === idUser);
    if (ami.length === 0 && idUser !== undefined) {
      users.push(idUser);
    }
    socket.emit('getusers', { users });
    socket.broadcast.emit('heison', users);
  });
  socket.on('imoff', id => {
    removeItemFromArr(users, id);
    socket.broadcast.emit('heisoff', users);
  });
  socket.on('disconnect', () => {
    console.log('desconectado');
  });

  socket.on('isTyping', objeto => {
    socket.broadcast.emit('isTyping', objeto);
  });
  socket.on('message', body => {
    socket.broadcast.emit('message', {
      body,
      from: socket.id
    });
  });

  socket.on('home', async () => {
    const trips = await Trip.find();
    socket.broadcast.emit('home', trips);
  });
});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort (val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError (error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
  case 'EACCES':
    console.error(bind + ' requires elevated privileges');
    process.exit(1);
    break;
  case 'EADDRINUSE':
    console.error(bind + ' is already in use');
    process.exit(1);
    break;
  default:
    throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening () {
  const addr = server.address();
  const bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
